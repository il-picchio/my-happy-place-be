// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: places_tags.sql

package generated

import (
	"context"

	"github.com/google/uuid"
)

const createPlaceTag = `-- name: CreatePlaceTag :exec
INSERT INTO place_tags (
  place_id,
  tag_id
)
VALUES (
  $1,  -- place_id UUID
  $2   -- tag_id   UUID
)
ON CONFLICT (place_id, tag_id) DO NOTHING
`

type CreatePlaceTagParams struct {
	PlaceID uuid.UUID `json:"place_id"`
	TagID   uuid.UUID `json:"tag_id"`
}

func (q *Queries) CreatePlaceTag(ctx context.Context, arg CreatePlaceTagParams) error {
	_, err := q.db.Exec(ctx, createPlaceTag, arg.PlaceID, arg.TagID)
	return err
}

const deletePlaceTag = `-- name: DeletePlaceTag :exec
DELETE FROM place_tags
WHERE place_id = $1
  AND tag_id   = $2
`

type DeletePlaceTagParams struct {
	PlaceID uuid.UUID `json:"place_id"`
	TagID   uuid.UUID `json:"tag_id"`
}

// Remove a specific tag assignment from a place
func (q *Queries) DeletePlaceTag(ctx context.Context, arg DeletePlaceTagParams) error {
	_, err := q.db.Exec(ctx, deletePlaceTag, arg.PlaceID, arg.TagID)
	return err
}

const deletePlaceTagsExcept = `-- name: DeletePlaceTagsExcept :exec

DELETE FROM place_tags
WHERE place_id = $1
  AND tag_id <> ALL($2)
`

type DeletePlaceTagsExceptParams struct {
	PlaceID uuid.UUID `json:"place_id"`
	TagIds  uuid.UUID `json:"tag_ids"`
}

// db/queries/place_tags.sql
func (q *Queries) DeletePlaceTagsExcept(ctx context.Context, arg DeletePlaceTagsExceptParams) error {
	_, err := q.db.Exec(ctx, deletePlaceTagsExcept, arg.PlaceID, arg.TagIds)
	return err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package generated

import (
	"context"

	"github.com/google/uuid"
)

type Querier interface {
	CreateOpeningHour(ctx context.Context, arg CreateOpeningHourParams) error
	CreatePlace(ctx context.Context, arg CreatePlaceParams) error
	CreatePlaceTag(ctx context.Context, arg CreatePlaceTagParams) error
	// Query to insert a new tag and return all columns
	CreateTag(ctx context.Context, arg CreateTagParams) (CreateTagRow, error)
	DeleteOpeningHoursByDay(ctx context.Context, arg DeleteOpeningHoursByDayParams) error
	// Remove a specific tag assignment from a place
	DeletePlaceTag(ctx context.Context, arg DeletePlaceTagParams) error
	// db/queries/place_tags.sql
	DeletePlaceTagsExcept(ctx context.Context, arg DeletePlaceTagsExceptParams) error
	// Permanently delete a tag by its ID.
	DeleteTag(ctx context.Context, id uuid.UUID) error
	// Mark a tag as deprecated.
	DeprecateTag(ctx context.Context, id uuid.UUID) (DeprecateTagRow, error)
	// Fetch all tags of a given type, optionally including deprecated ones.
	GetAllTagsByType(ctx context.Context, arg GetAllTagsByTypeParams) ([]GetAllTagsByTypeRow, error)
	GetOpeningHoursByPlaceID(ctx context.Context, placeID uuid.UUID) ([]GetOpeningHoursByPlaceIDRow, error)
	GetPlaceByID(ctx context.Context, id uuid.UUID) (GetPlaceByIDRow, error)
	// Fetch places ordered by id + keyset pagination, filtered by tags and opening hours.
	// Parameters:
	//   @last_id        : uuid     — last place.id from previous page (pass NULL for first page)
	//   @tag_ids        : uuid[]   — array of tag IDs that the place must have (pass NULL or '{}' to ignore)
	//   @day_of_week    : int4     — integer 0=Sunday … 6=Saturday (pass NULL to ignore)
	//   @time_of_day    : time     — time in HH:MM:SS (pass NULL to ignore)
	GetPlacesFilteredNoCoords(ctx context.Context, arg GetPlacesFilteredNoCoordsParams) ([]GetPlacesFilteredNoCoordsRow, error)
	// Find places near a given point, using distance sorting + cursor pagination,
	// filtered by matching all provided tags and by opening hours.
	// Parameters:
	//   @lng            : float8    — reference longitude
	//   @lat            : float8    — reference latitude
	//   @last_distance  : float8    — distance cursor for pagination (pass NULL for first page)
	//   @max_distance   : float8    — maximum distance filter (meters) (pass NULL to ignore)
	//   @tag_ids        : uuid[]    — array of tag IDs that the place must have (pass NULL or '{}' to ignore)
	//   @day_of_week    : int4      — integer 0=Sunday … 6=Saturday (pass NULL to ignore)
	//   @time_of_day    : time      — time in HH:MM:SS (pass NULL to ignore)
	GetPlacesNearbyWithCoords(ctx context.Context, arg GetPlacesNearbyWithCoordsParams) ([]GetPlacesNearbyWithCoordsRow, error)
	// Fetch a single tag by exact name, optionally including deprecated.
	GetTagByExactName(ctx context.Context, arg GetTagByExactNameParams) (GetTagByExactNameRow, error)
	// Search tags by partial name, any display_name value, or any description value (across all languages),
	// optionally including deprecated ones.
	GetTagsLike(ctx context.Context, arg GetTagsLikeParams) ([]GetTagsLikeRow, error)
	UpdatePlacePartial(ctx context.Context, arg UpdatePlacePartialParams) error
	// Update only the provided fields for a specific tag; leave others unchanged.
	UpdateTag(ctx context.Context, arg UpdateTagParams) (UpdateTagRow, error)
}

var _ Querier = (*Queries)(nil)

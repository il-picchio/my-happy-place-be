// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: opening_hours.sql

package generated

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createOpeningHour = `-- name: CreateOpeningHour :exec
INSERT INTO place_opening_hours (
  place_id,
  day_of_week,
  start_time,
  end_time
) VALUES (
  $1,
  $2,
  $3,
  $4
)
`

type CreateOpeningHourParams struct {
	PlaceID   uuid.UUID   `json:"place_id"`
	DayOfWeek int16       `json:"day_of_week"`
	StartTime pgtype.Time `json:"start_time"`
	EndTime   pgtype.Time `json:"end_time"`
}

func (q *Queries) CreateOpeningHour(ctx context.Context, arg CreateOpeningHourParams) error {
	_, err := q.db.Exec(ctx, createOpeningHour,
		arg.PlaceID,
		arg.DayOfWeek,
		arg.StartTime,
		arg.EndTime,
	)
	return err
}

const deleteOpeningHoursByDay = `-- name: DeleteOpeningHoursByDay :exec
DELETE FROM place_opening_hours
WHERE place_id = $1 AND day_of_week = $2
`

type DeleteOpeningHoursByDayParams struct {
	PlaceID   uuid.UUID `json:"place_id"`
	DayOfWeek int16     `json:"day_of_week"`
}

func (q *Queries) DeleteOpeningHoursByDay(ctx context.Context, arg DeleteOpeningHoursByDayParams) error {
	_, err := q.db.Exec(ctx, deleteOpeningHoursByDay, arg.PlaceID, arg.DayOfWeek)
	return err
}

const getOpeningHoursByPlaceID = `-- name: GetOpeningHoursByPlaceID :many
SELECT
  day_of_week,
  start_time,
  end_time
FROM place_opening_hours
WHERE place_id = $1
ORDER BY day_of_week, start_time
`

type GetOpeningHoursByPlaceIDRow struct {
	DayOfWeek int16       `json:"day_of_week"`
	StartTime pgtype.Time `json:"start_time"`
	EndTime   pgtype.Time `json:"end_time"`
}

func (q *Queries) GetOpeningHoursByPlaceID(ctx context.Context, placeID uuid.UUID) ([]GetOpeningHoursByPlaceIDRow, error) {
	rows, err := q.db.Query(ctx, getOpeningHoursByPlaceID, placeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetOpeningHoursByPlaceIDRow{}
	for rows.Next() {
		var i GetOpeningHoursByPlaceIDRow
		if err := rows.Scan(&i.DayOfWeek, &i.StartTime, &i.EndTime); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
